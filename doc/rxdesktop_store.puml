' PlantUML
@startuml
title DB & Presentation Update Flow

skinparam activity {
  BackgroundColor #ffffff
  BorderColor #609090
}


partition "Main Process" {
    "_willResizeListener/_willMoveListener" --> ===B1===

    partition "Database Update" #fff0e0 {
        ===B1=== --> [rect] "_debouncedAvatarSizeUpdateActionQueue"
        "_debouncedAvatarSizeUpdateActionQueue" --> [debounce 1000ms] "persistentStoreActionDispatcher(action)"
        note top
            skipForward is set to true
        end note    
        "persistentStoreActionDispatcher(action)" --> [action] "storeUpdater(action)"
        "storeUpdater(action)" --> [action] "avatarUpdater(action, reducer(avatar))"
    }

    ===B1=== --> [{ state: rect, propertyName: 'geometry' }] "reactiveForwarder" #e0ffe0
    
    "Forwarding Observer" #e0ffe0 --> [{ state: avatar }] "reactiveForwarder" 
}

partition Initialization {
    (*) --> "loadCurrentWorkspace()"
}
    
partition preload #e0ffe0 {
    "loadCurrentWorkspace()" --> ['render-card' event with card and avatar] "ipcRenderer - postMessage bridge"     
    "reactiveForwarder" --> ['reactive-forward' event\n with updated state] "ipcRenderer - postMessage bridge"
}

partition RxDB  #fff0e0 {
    "avatarUpdater(action, reducer(avatar))" --> [new avatar] "start atomicPatch"    
    "start atomicPatch" -left-> [new avatar] "preSave hook"
    if "skipForward?" then
        --> [true] "reserve skipForward" #ffff00 
        -right-> "Save"
    else 
        --> [false] "Save"
    "Save" -down-> "Observable Avatar"
    "Observable Avatar" #e0ffe0 --> "skipForward Filter" #e0ffe0
    note left
        execute
        skipForward
    end note

    "Forwarding Observer" --> [subscribe] "skipForward Filter"
    "skipForward Filter" --> [update event\n with new avatar] "Forwarding Observer"
}            

partition "GitHub Plugin" #fff0e0 {
    "new commit" -right-> "syncTo"
    note top
        skipForward is set to false
        (default)
    end note
    "syncTo" --> "start atomicPatch"
    "Observable Avatar" -up-> [update event\n with new avatar] "Observer(GitHub)" #e0ffe0
    "Observer(GitHub)" -right-> [subscribe] "Observable Avatar"
    "Observer(GitHub)" -left-> "new commit"
}

partition "Renderer Process" {
    "onmousemove" --> ===B2===        
    partition "Reactive Presentation Update" #e0ffe0 {    
        ===B2=== --> [rect] "Update HTML Components"
    }
    partition "Database Update\n(Forward to Main)" #fff0e0 {
    ===B2=== --> [rect] "debouncedResizeQueue"
        "debouncedResizeQueue" --> [debounce 1000ms] "persistentStoreActionDispatcherFromRenderer(action)"
        note bottom 
          skipForward is set to true
        end note    
        "persistentStoreActionDispatcherFromRenderer(action)" -right-> [action] "storeUpdater(action)"     
    }
    "ipcRenderer - postMessage bridge" --> "Update HTML Components"    
}

"User Mouse Dragging\n Dragging title bar to move window\n Dragging edges to resize window" #ffc0c0 --> ===B0===
-right-> ['will-resize' or 'will-move' event] "_willResizeListener/_willMoveListener"
note top
    Window position and size
    are changed immediately
    by mouse dragging.
end note

===B0=== --> ['mousemove' event on resizeArea] "onmousemove"
note top
    Window size has not been changed yet.
end note
